From f205678bc18d6b7b1ffc57aa923120348271623b Mon Sep 17 00:00:00 2001
From: Neon <yyk1249501542@gmail.com>
Date: Sun, 17 Nov 2024 22:07:53 +0800
Subject: [PATCH 19/24] fix warnings

---
 crates/mega/src/mega.rs                   | 44 ++++++++---------------
 crates/project_panel/src/project_panel.rs | 13 ++++---
 2 files changed, 20 insertions(+), 37 deletions(-)

diff --git a/crates/mega/src/mega.rs b/crates/mega/src/mega.rs
index 9003361e4f..2d85052e63 100644
--- a/crates/mega/src/mega.rs
+++ b/crates/mega/src/mega.rs
@@ -1,38 +1,20 @@
-// This crate delegate mega and its fuse daemon.
-// The following requirements should be met:
-//
-// TODO:
-// 1. Only one daemon on this machine.
-//      This should be both warrantied by this module and scorpio
-// 2. At least one daemon on this machine when zed startup.
-// 3. Complete docs.
-
 use crate::api::{
     ConfigRequest, ConfigResponse, MountRequest, MountResponse, MountsResponse, UmountRequest,
     UmountResponse,
 };
 use crate::mega_settings::MegaSettings;
-use crate::Event::FuseMounted;
 use futures::channel::oneshot;
 use futures::channel::oneshot::Receiver;
-use futures::future::MaybeDone::Future;
-use futures::{AsyncReadExt, FutureExt, SinkExt, TryFutureExt};
-use gpui::http_client::{AsyncBody, HttpClient, HttpRequestExt};
-use gpui::{AppContext, Context, EventEmitter, ModelContext, Path, Task};
+use futures::AsyncReadExt;
+use gpui::http_client::{AsyncBody, HttpClient};
+use gpui::{AppContext, EventEmitter, ModelContext};
 use radix_trie::{Trie, TrieCommon};
 use reqwest_client::ReqwestClient;
-use schemars::_private::NoSerialize;
-use serde::Serialize;
 use settings::Settings;
-use std::collections::{BTreeMap, BTreeSet, HashSet};
-use std::ffi::OsStr;
 use std::fmt::{Debug, Formatter};
-use std::hash::{DefaultHasher, Hash, Hasher};
-use std::io::Read;
 use std::path::PathBuf;
 use std::process::Command;
-use std::sync::{Arc, RwLock};
-use std::thread::sleep;
+use std::sync::Arc;
 use std::time::Duration;
 
 pub mod api;
@@ -234,12 +216,10 @@ impl Mega {
                 let path = PathBuf::from(p); // FIXME is there a better way?
                 cx.spawn(|mega, mut cx| async move {
                     let recv = mega
-                        .update(&mut cx, |this, cx| {
-                            this.restore_path(cx, path)
-                        })
+                        .update(&mut cx, |this, cx| this.restore_path(cx, path))
                         .expect("mega delegate not be dropped");
 
-                    if let Ok(Some(resp)) = recv.await {
+                    if let Ok(Some(_resp)) = recv.await {
                         mega.update(&mut cx, |this, cx| {
                             // TODO use a new check out state struct
                             cx.emit(Event::FuseCheckout(None));
@@ -250,9 +230,6 @@ impl Mega {
                 })
                 .detach();
             }
-
-            self.fuse_mounted = false;
-            cx.emit(Event::FuseMounted(None));
         }
     }
 
@@ -460,7 +437,14 @@ impl Mega {
 
     pub fn mark_checkout(&mut self, cx: &mut ModelContext<Self>, path: String, inode: u64) {
         if self.mount_point.is_some() {
-            let path = self.mount_point.clone().unwrap().to_str().unwrap().to_string() + path.as_str();
+            let path = self
+                .mount_point
+                .clone()
+                .unwrap()
+                .to_str()
+                .unwrap()
+                .to_string()
+                + path.as_str();
             self.checkout_path.insert(path, inode);
             cx.emit(Event::FuseCheckout(None));
         }
diff --git a/crates/project_panel/src/project_panel.rs b/crates/project_panel/src/project_panel.rs
index baec6a00a5..70ad294cd9 100644
--- a/crates/project_panel/src/project_panel.rs
+++ b/crates/project_panel/src/project_panel.rs
@@ -45,7 +45,7 @@ use std::{
     time::Duration,
 };
 use theme::ThemeSettings;
-use ui::{prelude::*, v_flex, ContextMenu, Icon, KeyBinding, Label, ListItem, Tooltip};
+use ui::{prelude::*, v_flex, ContextMenu, Icon, Label, ListItem, Tooltip};
 use util::{maybe, ResultExt, TryFutureExt};
 use workspace::{
     dock::{DockPosition, Panel, PanelEvent},
@@ -287,12 +287,12 @@ impl ProjectPanel {
             )
             .detach();
 
-            cx.subscribe(&mega, |this, mega, mega_event, cx| match mega_event {
+            cx.subscribe(&mega, |this, _, mega_event, cx| match mega_event {
                 mega::Event::FuseMounted(Some(path)) => {
                     println!("Fuse Mounted: {path:?}");
                     let path = path.to_owned();
                     this.workspace
-                        .update(cx, |workspace, cx| {
+                        .update(cx, |_, cx| {
                             cx.spawn(|this, mut cx| async move {
                                 if let Some(task) = this
                                     .update(&mut cx, |this, cx| {
@@ -312,7 +312,7 @@ impl ProjectPanel {
                 mega::Event::FuseMounted(None) => {
                     // TODO: close the workspace
                 }
-                mega::Event::FuseCheckout(path) => {
+                mega::Event::FuseCheckout(_path) => {
                     // It's not important, for now.
                 }
                 _ => {}
@@ -1343,7 +1343,7 @@ impl ProjectPanel {
     }
 
     fn checkout_specific_path(&mut self, _: &CheckoutPath, cx: &mut ViewContext<Self>) {
-        if let Some((worktree, entry)) = self.selected_entry_handle(cx) {
+        if let Some((_, entry)) = self.selected_entry_handle(cx) {
             let path = entry.path.clone();
             self.mega.update(cx, |mega, cx| {
                 let recv = mega.checkout_path(cx, path.to_path_buf());
@@ -1365,7 +1365,7 @@ impl ProjectPanel {
     }
 
     fn commit_specific_path(&mut self, _: &CommitPath, cx: &mut ViewContext<Self>) {
-        if let Some((worktree, entry)) = self.selected_entry_handle(cx) {
+        if let Some((_, entry)) = self.selected_entry_handle(cx) {
             let path = entry.path.clone();
             self.mega.update(cx, |mega, cx| {
                 let recv = mega.restore_path(cx, path.to_path_buf());
@@ -2395,7 +2395,6 @@ impl ProjectPanel {
         details: EntryDetails,
         cx: &mut ViewContext<Self>,
     ) -> Stateful<Div> {
-        let mega = self.mega.read(cx);
         let kind = details.kind;
         let settings = ProjectPanelSettings::get_global(cx);
         let show_editor = details.is_editing && !details.is_processing;
-- 
2.43.0

