From 7b8bce244556a88a95672ffa79cfc21fb0da2efe Mon Sep 17 00:00:00 2001
From: Neon <yyk1249501542@gmail.com>
Date: Tue, 19 Nov 2024 11:13:48 +0800
Subject: [PATCH 21/24] improve code quality, format and fix warnings

---
 crates/mega/src/mega.rs             |  16 ++-
 crates/mega/src/utils.rs            |   1 +
 crates/mega/src/{ => utils}/api.rs  |   0
 crates/mega_panel/src/mega_panel.rs | 171 ++++++++++++++--------------
 4 files changed, 92 insertions(+), 96 deletions(-)
 create mode 100644 crates/mega/src/utils.rs
 rename crates/mega/src/{ => utils}/api.rs (100%)

diff --git a/crates/mega/src/mega.rs b/crates/mega/src/mega.rs
index 2d85052e63..abc46f1651 100644
--- a/crates/mega/src/mega.rs
+++ b/crates/mega/src/mega.rs
@@ -1,4 +1,4 @@
-use crate::api::{
+use utils::api::{
     ConfigRequest, ConfigResponse, MountRequest, MountResponse, MountsResponse, UmountRequest,
     UmountResponse,
 };
@@ -17,8 +17,8 @@ use std::process::Command;
 use std::sync::Arc;
 use std::time::Duration;
 
-pub mod api;
 mod mega_settings;
+pub mod utils;
 
 pub fn init(cx: &mut AppContext) {
     Mega::init(cx);
@@ -31,6 +31,7 @@ pub enum Event {
     FuseCheckout(Option<PathBuf>),
 }
 
+#[allow(unused)]
 struct CheckoutState {
     path: PathBuf,
     mounted: bool,
@@ -90,7 +91,7 @@ impl Mega {
             None
         };
 
-        let mega = Mega {
+        Mega {
             fuse_executable,
 
             fuse_running: false,
@@ -103,10 +104,7 @@ impl Mega {
             mega_url,
             fuse_url,
             http_client: Arc::new(client),
-        };
-
-        println!("Mega New: {mega:?}");
-        mega
+        }
     }
 
     pub fn update_status(&mut self, cx: &mut ModelContext<Self>) {
@@ -198,7 +196,7 @@ impl Mega {
                         .expect("mega delegate not be dropped");
 
                     if let Ok(Some(resp)) = recv.await {
-                        mega.update(&mut cx, |this, cx| {
+                        mega.update(&mut cx, |_, cx| {
                             let buf = PathBuf::from(resp.mount.path.clone());
                             cx.emit(Event::FuseCheckout(Some(buf)));
                         })
@@ -220,7 +218,7 @@ impl Mega {
                         .expect("mega delegate not be dropped");
 
                     if let Ok(Some(_resp)) = recv.await {
-                        mega.update(&mut cx, |this, cx| {
+                        mega.update(&mut cx, |_, cx| {
                             // TODO use a new check out state struct
                             cx.emit(Event::FuseCheckout(None));
                         })
diff --git a/crates/mega/src/utils.rs b/crates/mega/src/utils.rs
new file mode 100644
index 0000000000..e5fdf85eed
--- /dev/null
+++ b/crates/mega/src/utils.rs
@@ -0,0 +1 @@
+pub mod api;
diff --git a/crates/mega/src/api.rs b/crates/mega/src/utils/api.rs
similarity index 100%
rename from crates/mega/src/api.rs
rename to crates/mega/src/utils/api.rs
diff --git a/crates/mega_panel/src/mega_panel.rs b/crates/mega_panel/src/mega_panel.rs
index 142f627ed8..c5105988e0 100644
--- a/crates/mega_panel/src/mega_panel.rs
+++ b/crates/mega_panel/src/mega_panel.rs
@@ -1,18 +1,25 @@
-use std::path::PathBuf;
 use crate::mega_panel_settings::{MegaPanelDockPosition, MegaPanelSettings};
 use anyhow::{anyhow, Context};
 use db::kvp::KEY_VALUE_STORE;
 use fs::Fs;
 use gpui::private::serde_derive::{Deserialize, Serialize};
 use gpui::private::serde_json;
-use gpui::{actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId, EventEmitter, Flatten, FocusHandle, FocusableView, FontWeight, InteractiveElement, IntoElement, Model, ParentElement, PathPromptOptions, Pixels, PromptLevel, Render, SharedString, Stateful, StatefulInteractiveElement, Styled, Task, UniformListScrollHandle, View, ViewContext, VisualContext, WeakView, WindowContext};
+use gpui::{
+    actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId,
+    EventEmitter, FocusHandle, FocusableView, FontWeight, InteractiveElement, IntoElement, Model,
+    ParentElement, Pixels, PromptLevel, Render, SharedString, Stateful, Styled, Task
+    , View, ViewContext, VisualContext, WeakView, WindowContext,
+};
 use mega::Mega;
 use settings::Settings;
 use std::sync::Arc;
 use text::BufferId;
 use util::{ResultExt, TryFutureExt};
 use workspace::dock::{DockPosition, Panel, PanelEvent};
-use workspace::ui::{h_flex, v_flex, Button, Clickable, Color, FixedWidth, IconName, IconPosition, Label, LabelCommon, LabelSize, StyledExt, StyledTypography};
+use workspace::ui::{
+    h_flex, v_flex, Button, Clickable, Color, FixedWidth, IconName, IconPosition, Label,
+    LabelCommon, LabelSize, StyledExt, StyledTypography,
+};
 use workspace::Workspace;
 use worktree::{ProjectEntryId, WorktreeId};
 
@@ -20,22 +27,15 @@ mod mega_panel_settings;
 
 const MEGA_PANEL_KEY: &str = "MegaPanel";
 
-actions!(
-    mega_panel,
-    [
-        ToggleFocus,
-        ToggleFuseMount,
-        CheckoutPath,
-    ]
-);
+actions!(mega_panel, [ToggleFocus, ToggleFuseMount, CheckoutPath,]);
 
 pub struct MegaPanel {
     mega_handle: Model<Mega>,
-    workspace: WeakView<Workspace>,
+    // workspace: WeakView<Workspace>,
     focus_handle: FocusHandle,
-    scroll_handle: UniformListScrollHandle,
+    // scroll_handle: UniformListScrollHandle,
     fs: Arc<dyn Fs>,
-    pending_serialization: Task<Option<()>>, // TODO check how to use it
+    pending_serialization: Task<Option<()>>,
     width: Option<Pixels>,
 }
 
@@ -44,6 +44,7 @@ struct SerializedMegaPanel {
     width: Option<Pixels>,
 }
 
+#[allow(unused)]
 #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
 enum MegaEntry {
     Dir(WorktreeId, ProjectEntryId),
@@ -68,7 +69,7 @@ pub fn init(assets: impl AssetSource, cx: &mut AppContext) {
             workspace.toggle_panel_focus::<MegaPanel>(cx);
         });
     })
-        .detach();
+    .detach();
 }
 
 impl EventEmitter<Event> for MegaPanel {}
@@ -91,7 +92,8 @@ impl Render for MegaPanel {
                     Label::new("Mega Control Panel")
                         .single_line()
                         .weight(FontWeight::BOLD)
-                        .size(LabelSize::Large))
+                        .size(LabelSize::Large),
+                ),
             )
             .child(horizontal_separator(cx))
             .child(self.render_status(cx))
@@ -182,19 +184,16 @@ impl MegaPanel {
             .log_err()
             .flatten();
 
-        workspace.update(
-            &mut cx,
-            |workspace, cx| {
-                let panel = MegaPanel::new(workspace, cx);
-                if let Some(serialized_panel) = serialized_panel {
-                    panel.update(cx, |panel, cx| {
-                        panel.width = serialized_panel.width.map(|px| px.round());
-                        cx.notify();
-                    });
-                }
-                panel
-            },
-        )
+        workspace.update(&mut cx, |workspace, cx| {
+            let panel = MegaPanel::new(workspace, cx);
+            if let Some(serialized_panel) = serialized_panel {
+                panel.update(cx, |panel, cx| {
+                    panel.width = serialized_panel.width.map(|px| px.round());
+                    cx.notify();
+                });
+            }
+            panel
+        })
     }
 
     fn new(workspace: &mut Workspace, cx: &mut ViewContext<Workspace>) -> View<Self> {
@@ -206,17 +205,18 @@ impl MegaPanel {
             #[allow(unused)]
             cx.subscribe(mega, |this, mega, event, cx| {
                 // TODO: listen for mega events
-            }).detach();
-            
+            })
+            .detach();
+
             mega.update(cx, |this, cx| {
                 this.heartbeat(cx);
             });
 
             Self {
                 mega_handle: mega.clone(),
-                workspace: workspace.weak_handle(),
+                // workspace: workspace.weak_handle(),
                 focus_handle,
-                scroll_handle: UniformListScrollHandle::new(),
+                // scroll_handle: UniformListScrollHandle::new(),
                 fs: workspace.app_state().fs.clone(),
                 pending_serialization: Task::ready(None),
                 width: None,
@@ -238,7 +238,7 @@ impl MegaPanel {
                     .await?;
                 anyhow::Ok(())
             }
-                .log_err(),
+            .log_err(),
         );
     }
 
@@ -251,77 +251,78 @@ impl MegaPanel {
     pub fn checkout_path(&mut self, _: &CheckoutPath, cx: &mut ViewContext<Self>) {
         self.warn_unimplemented(cx);
     }
-    
+
     pub fn toggle_fuse_mount(&mut self, _: &ToggleFuseMount, cx: &mut ViewContext<Self>) {
-        self.mega_handle.update(cx, |this, cx | {
+        self.mega_handle.update(cx, |this, cx| {
             this.toggle_mount(cx);
         });
     }
 
     fn render_status(&mut self, cx: &mut ViewContext<Self>) -> Div {
-        let (
-            fuse_running,
-            fuse_mounted
-        ) = self.mega_handle.read(cx).status();
-
-        v_flex()
-            .gap_1()
-            .children([
-                self.status_unit(cx, "Scorpio Backend:", fuse_running),
-                self.status_unit(cx, "Fuse Mounted:", fuse_mounted),
-            ])
+        let (fuse_running, fuse_mounted) = self.mega_handle.read(cx).status();
+
+        v_flex().gap_1().children([
+            self.status_unit(cx, "Scorpio Backend:", fuse_running),
+            self.status_unit(cx, "Fuse Mounted:", fuse_mounted),
+        ])
     }
 
     fn render_buttons(&mut self, cx: &mut ViewContext<Self>) -> impl IntoElement {
         fn encap_btn(btn: Button) -> Div {
-            div()
-                .m_1()
-                .border_1()
-                .child(btn)
+            div().m_1().border_1().child(btn)
         }
-        
-        v_flex()
-            .id("mega-control-pad")
-            .size_full()
-            .children([
-                encap_btn(Button::new("btn_toggle_mount", "Toggle Fuse Running")
+
+        v_flex().id("mega-control-pad").size_full().children([
+            encap_btn(
+                Button::new("btn_toggle_mount", "Toggle Fuse Running")
                     .full_width()
                     .icon(IconName::Context)
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
-                        this.mega_handle.update(cx, |mega, cx| mega.toggle_mount(cx));
-                    }))
-                ),
-                encap_btn(Button::new("btn_toggle_scorpio", "Toggle Scorpio Checkouts")
+                        this.mega_handle
+                            .update(cx, |mega, cx| mega.toggle_mount(cx));
+                    })),
+            ),
+            encap_btn(
+                Button::new("btn_toggle_scorpio", "Toggle Scorpio Checkouts")
                     .full_width()
                     .icon(IconName::Plus)
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
                         this.mega_handle.update(cx, |mega, cx| mega.toggle_fuse(cx));
-                    }))
-                ),
-            ])
+                    })),
+            ),
+        ])
     }
 
-    fn status_unit(&self, cx: &mut ViewContext<MegaPanel>, name: &'static str, state: bool) -> Stateful<Div> {
+    fn status_unit(
+        &self,
+        cx: &mut ViewContext<MegaPanel>,
+        name: &'static str,
+        state: bool,
+    ) -> Stateful<Div> {
         let unit_id = ElementId::from(SharedString::from(format!("status_{}", name)));
-        div()
-            .text_ui(cx)
-            .id(unit_id)
-            .child(
-                h_flex()
-                    .justify_between()
-                    .child(Label::new(name))
-                    .child(match state {
-                        true => Label::new("Active").color(Color::Success),
-                        false => Label::new("Inactive").color(Color::Error)
-                    })
-            )
+        div().text_ui(cx).id(unit_id).child(
+            h_flex()
+                .justify_between()
+                .child(Label::new(name))
+                .child(match state {
+                    true => Label::new("Active").color(Color::Success),
+                    false => Label::new("Inactive").color(Color::Error),
+                }),
+        )
     }
 
     fn warn_unimplemented(&self, cx: &mut ViewContext<Self>) {
-        let message = String::from("This operation is not implemented yet, functions may not behave correctly");
-        let _ = cx.prompt(PromptLevel::Warning, "Unimplemented", Some(&message), &["Got it"]);
+        let message = String::from(
+            "This operation is not implemented yet, functions may not behave correctly",
+        );
+        let _ = cx.prompt(
+            PromptLevel::Warning,
+            "Unimplemented",
+            Some(&message),
+            &["Got it"],
+        );
     }
 }
 
@@ -331,10 +332,7 @@ fn horizontal_separator(cx: &mut WindowContext) -> Div {
 
 #[cfg(test)]
 mod tests {
-    use std::future::Future;
-    use db::smol::future::FutureExt;
-    use super::*;
-    use gpui::{TestAppContext, VisualTestContext};
+    use gpui::TestAppContext;
     use workspace::AppState;
 
     #[gpui::test]
@@ -344,7 +342,7 @@ mod tests {
             mega::init(cx);
             state
         });
-        
+
         state.mega.update(cx, |this, cx| {
             let recv = this.get_fuse_config(cx);
             cx.spawn(|_this, _cx| async move {
@@ -354,9 +352,8 @@ mod tests {
                         eprintln!("{config:?}");
                     }
                 }
-            }).detach();
+            })
+            .detach();
         });
-        
     }
-    
 }
-- 
2.43.0

