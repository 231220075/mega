use std::{
    env,
    io::{Cursor, Write},
    path::{Component, PathBuf},
    str::FromStr,
    sync::mpsc,
    vec,
};

use async_trait::async_trait;
use bytes::Bytes;

use callisto::{mega_tree, raw_blob};
use common::utils::{generate_id, MEGA_BRANCH_NAME, ZERO_ID};
use jupiter::storage::GitStorageProvider;
use jupiter::storage::{batch_query_by_columns, batch_save_model};
use mercury::internal::pack::{encode::PackEncoder, Pack};
use venus::{
    errors::GitError,
    hash::SHA1,
    internal::{
        object::{blob::Blob, commit::Commit, tag::Tag, tree::Tree},
        pack::{
            entry::Entry,
            reference::{CommandType, RefCommand, Refs},
        },
    },
    mr::MergeRequest,
    repo::Repo,
};

use crate::protocol::SmartProtocol;

#[async_trait]
pub trait PackHandler {
    async fn head_hash(&self, repo: Repo) -> (String, Vec<Refs>);

    async fn monorepo_head_hash(&self) -> Vec<Refs>;

    async fn unpack(&self, repo: &Repo, pack_file: Bytes) -> Result<(), GitError>;

    async fn handle_parent_directory(&self, mut path: PathBuf) -> Result<(), GitError>;

    /// Asynchronously retrieves the full pack data for the specified repository path.
    /// This function collects commits and nodes from the storage and packs them into
    /// a single binary vector. There is no need to build the entire tree; the function
    /// only sends all the data related to this repository.
    ///
    /// # Arguments
    /// * `repo_path` - The path to the repository.
    ///
    /// # Returns
    /// * `Result<Vec<u8>, GitError>` - The packed binary data as a vector of bytes.
    ///
    async fn full_pack(&self, repo: &Repo) -> Result<Vec<u8>, GitError>;

    async fn incremental_pack(
        &self,
        want: Vec<String>,
        have: Vec<String>,
        repo: &Repo,
    ) -> Result<Vec<u8>, GitError>;

    async fn open_mr(&self) -> MergeRequest;

    async fn convert_path_to_repo(&self) -> Repo;

    async fn update_refs(&self, repo: &Repo, refs: &RefCommand) -> Result<(), GitError>;
}

#[async_trait]
impl PackHandler for SmartProtocol {
    async fn head_hash(&self, repo: Repo) -> (String, Vec<Refs>) {
        let refs: Vec<Refs> = if repo.monorepo() {
            self.monorepo_head_hash().await
        } else {
            self.context
                .services
                .git_db_storage
                .get_ref(&repo)
                .await
                .unwrap()
        };

        let mut head_hash = ZERO_ID.to_string();
        for git_ref in refs.iter() {
            if git_ref.ref_name == *MEGA_BRANCH_NAME {
                head_hash = git_ref.ref_hash.clone();
            }
        }
        (head_hash, refs)
    }

    async fn monorepo_head_hash(&self) -> Vec<Refs> {
        let storage = self.context.services.mega_storage.clone();
        if self.path == PathBuf::from("/mega_mono") {
            return storage.get_ref("/").await.unwrap();
        }

        let res = storage
            .get_ref(self.path.to_str().unwrap())
            .await
            .unwrap();
        if !res.is_empty() {
            res
        } else {
            let target_path = self.path.clone();

            let ref_hash = storage.get_ref("/").await.unwrap()[0]
                .ref_hash
                .clone();
            let commit: Commit = storage
                .get_commit_by_hash(&Repo::empty(), &ref_hash)
                .await
                .unwrap()
                .unwrap()
                .into();
            let mut tree: Tree = storage
                .get_tree_by_hash(&Repo::empty(), &commit.tree_id.to_plain_str())
                .await
                .unwrap()
                .unwrap()
                .into();

            for component in target_path.components() {
                if component != Component::RootDir {
                    let path_name = component.as_os_str().to_str().unwrap();
                    let sha1 = tree
                        .tree_items
                        .clone()
                        .into_iter()
                        .find(|x| x.name == path_name)
                        .map(|x| x.id);
                    if let Some(sha1) = sha1 {
                        tree = storage
                            .get_tree_by_hash(&Repo::empty(), &sha1.to_plain_str())
                            .await
                            .unwrap()
                            .unwrap()
                            .into();
                    } else {
                        return vec![];
                    }
                }
            }
            let c = Commit::from_tree_id(
                tree.id,
                vec![],
                "This commit was generated by mega for maintain refs",
            );
            storage
                .save_ref(self.path.to_str().unwrap(), &c.id.to_plain_str(), &c.tree_id.to_plain_str())
                .await
                .unwrap();
            storage
                .save_mega_commits(&Repo::empty(), &MergeRequest::empty(), vec![c.clone()])
                .await
                .unwrap();
            vec![Refs {
                ref_name: MEGA_BRANCH_NAME.to_string(),
                ref_hash: c.id.to_plain_str(),
                ref_tree_hash: Some(c.tree_id.to_plain_str())
            }]
        }
    }

    async fn unpack(&self, repo: &Repo, pack_file: Bytes) -> Result<(), GitError> {
        let mr = self.open_mr().await;

        #[cfg(debug_assertions)]
        {
            let datetime = chrono::Utc::now().naive_utc();
            let path = format!("{}.pack", datetime);
            let mut output = std::fs::File::create(path).unwrap();
            output.write_all(&pack_file).unwrap();
        }

        let (sender, receiver) = mpsc::channel();
        let tmp = PathBuf::from("/tmp/.cache_temp");
        let p = Pack::new(None, Some(1024 * 1024 * 1024 * 4), Some(tmp.clone()));
        p.decode_async(Cursor::new(pack_file), sender); //Pack moved here
        let storage = self.context.services.mega_storage.clone();
        let mut entry_list = Vec::new();

        for entry in receiver {
            entry_list.push(entry);
            if entry_list.len() >= 1000 {
                storage.save_entry(&mr, repo, entry_list).await.unwrap();
                entry_list = Vec::new();
            }
        }
        storage.save_entry(&mr, repo, entry_list).await.unwrap();

        if repo.monorepo() {
            self.handle_parent_directory(self.path.clone())
                .await
                .unwrap();
        }

        Ok(())
    }

    async fn handle_parent_directory(&self, path: PathBuf) -> Result<(), GitError> {
        let storage = self.context.services.mega_storage.clone();
        let refs = &storage.get_ref("/").await.unwrap()[0];

        let mut target_name = path.file_name().unwrap().to_str().unwrap();
        let mut target_hash = SHA1::from_str(&refs.ref_tree_hash.clone().unwrap()).unwrap();

        let mut save_models: Vec<mega_tree::ActiveModel> = Vec::new();

        while let Some(parent) = path.parent() {
            println!("{:?}", parent);
            let model = storage
                .get_tree_by_path(path.to_str().unwrap(), &refs.ref_hash)
                .await
                .unwrap();
            if let Some(model) = model {
                let mut p_tree: Tree = model.into();
                let index = p_tree
                    .tree_items
                    .iter()
                    .position(|x| x.name == target_name);
                if let Some(index) = index {
                    p_tree.tree_items[index].id = target_hash;
                    let new_p_tree = Tree::from_tree_items(p_tree.tree_items).unwrap();

                    target_name = parent.file_name().unwrap().to_str().unwrap();
                    target_hash = new_p_tree.id;

                    let model: mega_tree::Model = new_p_tree.into();
                    let a_model = model.into();
                    save_models.push(a_model);
                } else {
                    return Err(GitError::ConversionError("Can't find child.".to_string()));
                }
            } else {
                return Err(GitError::ConversionError(
                    "Can't find parent tree.".to_string(),
                ));
            }
        }

        batch_save_model(storage.get_connection(), save_models)
            .await
            .unwrap();

        Ok(())
    }

    async fn full_pack(&self, repo: &Repo) -> Result<Vec<u8>, GitError> {
        let (sender, receiver) = mpsc::channel();
        let mut writer: Vec<u8> = Vec::new();

        let storage = self.context.services.mega_storage.clone();
        let total = storage.get_obj_count_by_repo_id(repo).await;
        let mut encoder = PackEncoder::new(total, 0, &mut writer);

        for m in storage
            .get_commits_by_repo_id(repo)
            .await
            .unwrap()
            .into_iter()
        {
            let c: Commit = m.into();
            let entry: Entry = c.into();
            sender.send(entry).unwrap();
        }

        for m in storage
            .get_trees_by_repo_id(repo)
            .await
            .unwrap()
            .into_iter()
        {
            let c: Tree = m.into();
            let entry: Entry = c.into();
            sender.send(entry).unwrap();
        }

        let bids: Vec<String> = storage
            .get_blobs_by_repo_id(repo)
            .await
            .unwrap()
            .into_iter()
            .map(|b| b.blob_id)
            .collect();

        let raw_blobs = batch_query_by_columns::<raw_blob::Entity, raw_blob::Column>(
            storage.get_connection(),
            raw_blob::Column::Sha1,
            bids,
            None,
            None,
        )
        .await
        .unwrap();

        for m in raw_blobs {
            // todo handle storage type
            let c: Blob = m.into();
            let entry: Entry = c.into();
            sender.send(entry).unwrap();
        }

        for m in storage.get_tags_by_repo_id(repo).await.unwrap().into_iter() {
            let c: Tag = m.into();
            let entry: Entry = c.into();
            sender.send(entry).unwrap();
        }
        drop(sender);
        encoder.encode(receiver).unwrap();

        Ok(writer)
    }

    async fn incremental_pack(
        &self,
        _want: Vec<String>,
        _have: Vec<String>,
        _repo: &Repo,
    ) -> Result<Vec<u8>, GitError> {
        todo!()
    }

    async fn open_mr(&self) -> MergeRequest {
        let mut mr = MergeRequest::default();
        mr.merge(None);
        self.context
            .services
            .mega_storage
            .save_mr(mr.clone())
            .await
            .unwrap();
        mr
    }

    async fn convert_path_to_repo(&self) -> Repo {
        let import_dir = PathBuf::from(env::var("MEGA_IMPORT_DIRS").unwrap());
        let storage = self.context.services.mega_storage.clone();
        if self.path.starts_with(import_dir.clone()) && self.path != import_dir {
            let path_str = self.path.to_str().unwrap();
            let model = storage.find_git_repo(path_str).await.unwrap();
            if let Some(repo) = model {
                repo.into()
            } else {
                let repo_name = self.path.file_name().unwrap().to_str().unwrap().to_owned();
                let repo = Repo {
                    repo_id: generate_id(),
                    repo_path: self.path.to_str().unwrap().to_owned(),
                    repo_name,
                };
                storage.save_git_repo(repo.clone()).await.unwrap();
                repo
            }
        } else {
            Repo::from_path(self.path.to_str().unwrap())
        }
    }

    async fn update_refs(&self, repo: &Repo, refs: &RefCommand) -> Result<(), GitError> {
        let storage = self.context.services.git_db_storage.clone();
        match refs.command_type {
            CommandType::Create => {
                storage.save_ref(repo, refs).await.unwrap();
            }
            CommandType::Delete => storage.remove_ref(repo, refs).await.unwrap(),
            CommandType::Update => {
                storage
                    .update_ref(repo, &refs.ref_name, &refs.new_id)
                    .await
                    .unwrap();
            }
        }
        Ok(())
    }
}
